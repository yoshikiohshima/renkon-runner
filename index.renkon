{"padTitle":"Server-Side-Renkon",
"positions":{"map":{"__map":true,
"values":[["6",{"height":3182.435646932122,
"id":"6",
"type":"resize",
"width":1322.0738844803989,
"x":-99.3602965940236,
"y":-261.0542546571053}],["11",{"height":596.7830539500513,
"id":"11",
"type":"move",
"width":617.0552724252162,
"x":-80.18909181201093,
"y":-914.9941746340685}],["12",{"height":1732.8831767708493,
"id":"12",
"type":"move",
"width":854.1451621960841,
"x":1163.1832287090183,
"y":-264.3996035759288}],["33",{"height":2911.2247363153574,
"id":"33",
"type":"resize",
"width":926.8266696019825,
"x":-2514.431904284744,
"y":-1114.6597745947263}],["38",{"height":1231.0838647162432,
"id":"38",
"type":"resize",
"width":805.0904433243433,
"x":-1470.94834825057,
"y":-1118.8888022134117}],["40",{"height":1565.6935232198896,
"id":"40",
"type":"resize",
"width":840.5951196412351,
"x":-1478.5242260169218,
"y":182.14143220565586}]]}},
"titles":{"map":{"__map":true,
"values":[["6",{"id":"6",
"state":false,
"title":"CSS"}],["11",{"id":"11",
"state":false,
"title":"Initialization"}],["12",{"id":"12",
"state":false,
"title":"Stringify"}],["33",{"id":"33",
"state":false,
"title":"iframes"}],["38",{"id":"38",
"state":false,
"title":"Data"}],["40",{"id":"40",
"state":false,
"title":"Program List"}]]}},
"version":2,
"windowEnabled":{"map":{"__map":true,
"values":[["6",{"enabled":true,
"id":"6"}],["11",{"enabled":true,
"id":"11"}],["12",{"enabled":true,
"id":"12"}],["33",{"enabled":true,
"id":"33"}],["38",{"enabled":true,
"id":"38"}],["40",{"enabled":true,
"id":"40"}]]}},
"windowTypes":{"map":{"__map":true,
"values":[["6","code"],["11","code"],["12","code"],["33","code"],["38","code"],["40","code"]]}},
"windows":["6","11","12","33","38","40"],
"zIndex":{"map":{"__map":true,
"values":[["6",109],["11",121],["12",111],["33",122],["38",120],["40",118]]}}}
{__codeMap: true, value: [[`6`, `    const css = \`
@font-face {
    font-family: "OpenSans-Regular";
    src: url("./assets/fonts/open-sans-v17-latin-ext_latin-regular.woff2") format("woff2");
}

@font-face {
  font-family: 'OpenSans-SemiBold';
  src: url("./assets/fonts/open-sans-v17-latin-ext_latin-600.woff2") format('woff2');
}

html, body, #renkon {
    overflow: hidden;
    height: 100%;
    margin: 0px;
}

#renkon {
   display: flex;
}

#field {
   flex-grow: 1;
}

html, body {
  overscroll-behavior-x: none;
  touch-action: none;
}


#owner {
    position: absolute;
    pointer-events: initial;
}

#buttonBox {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    row-gap: 8px;
    left: 0px;
    top: 0px;
    width: 100%;
    padding-bottom: 8px;
    padding-top: 8px;
    border-bottom: 1px solid black;
    background-color: white;
    position: absolute;
    z-index: 200000;
}
#sidebarTop {
  margin-bottom: 16px;
}
.thumbnail {
    display: flex;
}

.thumbLabel {
    flex-grow: 1;
}
#padTitle {
    margin-left: 24px;
}

.spacer {
    flex-grow: 1;
}

.menuButton {
    font-family: 'OpenSans-SemiBold';
    color: black;
    margin-left: 4px;
    margin-right: 4px;
    border-radius: 4px;
    cursor: pointer;
    border: 2px solid #555;
}
                   

.runnerIframe {
    width: 100%;
    height: 100%;
    border: 2px solid black;
    box-sizing: border-box;
    border-radius: 0px 0px 6px 6px;
    background-color: #fff;
    user-select: none;
}

.sidebarButton {
    width: 24px;
    height: 24px;
    margin: 4px;
    background-position: center;
    border: 0px;
    border-radius: 4px;
    background-size: 24px 24px;
}

.plusButton {
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-width%3D%223%22%20stroke-linecap%3D%22round%22%3E%3Cline%20x1%3D%2212%22%20y1%3D%225%22%20x2%3D%2212%22%20y2%3D%2219%22%2F%3E%3Cline%20x1%3D%225%22%20y1%3D%2212%22%20x2%3D%2219%22%20y2%3D%2212%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");
}

.trashButton {
    background-image: url("data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%3C!--%20Generator%3A%20Sketch%2064%20(93537)%20-%20https%3A%2F%2Fsketch.com%20--%3E%3Ctitle%3Eicon%2Fmaterial%2Ftrash-can%3C%2Ftitle%3E%3Cdesc%3ECreated%20with%20Sketch.%3C%2Fdesc%3E%3Cg%20id%3D%22icon%2Fmaterial%2Ftrash-can%22%20stroke%3D%22none%22%20stroke-width%3D%221%22%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20id%3D%22mdi-trash-can%22%3E%3Cg%20id%3D%22Icon%22%20fill%3D%22%234D4D4D%22%3E%3Cpath%20d%3D%22M9%2C3%20L9%2C4%20L4%2C4%20L4%2C6%20L5%2C6%20L5%2C19%20C5%2C20.1045695%205.8954305%2C21%207%2C21%20L17%2C21%20C18.1045695%2C21%2019%2C20.1045695%2019%2C19%20L19%2C6%20L20%2C6%20L20%2C4%20L15%2C4%20L15%2C3%20L9%2C3%20M9%2C8%20L11%2C8%20L11%2C17%20L9%2C17%20L9%2C8%20M13%2C8%20L15%2C8%20L15%2C17%20L13%2C17%20L13%2C8%20Z%22%20id%3D%22Icon-Shape%22%3E%3C%2Fpath%3E%3C%2Fg%3E%3Crect%20id%3D%22ViewBox%22%20fill-rule%3D%22nonzero%22%20x%3D%220%22%20y%3D%220%22%20width%3D%2224%22%20height%3D%2224%22%3E%3C%2Frect%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E");
}

.statusButton[status="go"] {
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%3E%3C!--%20Box%20outline%20--%3E%3Crect%20x%3D%223%22%20y%3D%223%22%20width%3D%2218%22%20height%3D%2218%22%20rx%3D%222%22%20ry%3D%222%22%2F%3E%3C%2Fg%3E%3C!--%20Green%20play%20triangle%20--%3E%3Cpolygon%20points%3D%229%2C7%2017%2C12%209%2C17%22%20fill%3D%22%2300AA00%22%2F%3E%3C%2Fsvg%3E");
}

.statusButton[status="stop"] {
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%3E%3C!--%20Box%20outline%20--%3E%3Crect%20x%3D%223%22%20y%3D%223%22%20width%3D%2218%22%20height%3D%2218%22%20rx%3D%222%22%20ry%3D%222%22%2F%3E%3C%2Fg%3E%3C!--%20Red%20stop%20square%20--%3E%3Crect%20x%3D%229%22%20y%3D%229%22%20width%3D%226%22%20height%3D%226%22%20fill%3D%22%23CC0000%22%2F%3E%3C%2Fsvg%3E");
}
\`;

    ((css) => {
        const renkon = document.querySelector("#renkon");
        const style = document.createElement("style");
        style.id = "pad-css";
        style.textContent = css;
        renkon.querySelector("#pad-css")?.remove();
        renkon.appendChild(style);
    })(css);
`],
[`11`, `const {h, html, render} = import("./preact.standalone.module.js");

const renkon = (() => {
    const renkon = document.createElement("div");
    renkon.id = "renkon";
    renkon.innerHTML = \`
<div id="sidebar">
  <div id="sidebarTop">
    <input class="menuButton" id="serverURL"></input>
    <button class="menuButton" id="updateButton">update</button>
  </div>
  <div id="thumbnailsHolder">
  </div>
</div>
<div id="field">
</div>

\`.trim();

    document.body.querySelector("#renkon")?.remove();
    document.body.appendChild(renkon);
    return renkon;
})();

const updateButton = Events.listener(
  renkon.querySelector("#updateButton"),
  "click",
  (evt) => evt
);
`],
[`12`, `const loadRenkon = (result) => {
    const index = result.indexOf("{__codeMap: true, value:");

    const data1 = result.slice(0, index);
    const data2 = result.slice(index);

    const loaded = parse(data1);

    if (loaded.version === 2) {
        const code = parseCodeMap(data2);
        loaded.code = code;
        return loaded;
    }
    console.log("unknown type of data");
}
  
function stringifyInner(node, seen) {
    if (node === undefined) return undefined;
    if (typeof node === 'number') return Number.isFinite(node) ? \`\${node}\` : 'null';
    if (typeof node !== 'object') return JSON.stringify(node, null, 4);

    let out;
    if (Array.isArray(node)) {
        out = '[';
        for (let i = 0; i < node.length; i++) {
            if (i > 0) out += ',';
            out += stringifyInner(node[i], seen) || 'null';
        }
        return out + ']';
    }

    if (node === null) return 'null';

    if (seen.has(node)) {
        throw new TypeError('Converting circular structure to JSON');
    }

    seen.add(node);

    if (node.constructor === window.Map) {
        let replacement = {__map: true, values: [...node]};
        return stringifyInner(replacement, seen);
    }

    if (node.constructor === window.Set) {
        let replacement = {__set: true, values: [...node]};
        return stringifyInner(replacement, seen);
    }

    let keys = Object.keys(node).sort();
    out = '';
    for (let i = 0; i < keys.length; i++) {
        let key = keys[i];
        let value = stringifyInner(node[key], seen, out);
        if (!value) continue;
        if (out !== '') out += ',\\n';
        out += JSON.stringify(key) + ':' + value;
    }
    seen.delete(node);
    return '{' + out + '}';
}

function stringify(obj) {
    let seen = new Set();
    return stringifyInner(obj, seen);
}

function parse(string) {
    return JSON.parse(string, (_key, value) => {
        if (typeof value === "object" && value !== null && value.__map) {
            return new Map(value.values);
        } else if (typeof value === "object" && value !== null && value.__set) {
            return new Set(value.values);
        }
        return value;
    });
}

function stringifyCodeMap(map) {
    function replace(str) {
        return str.replaceAll("\\\\", "\\\\\\\\").replaceAll("\`", "\\\\\`").replaceAll("\$", "\\\\\$");
    }

    return "\\n{__codeMap: true, value: " + "[" +
        [...map].map(([key, value]) => ("[" + "\`" + replace(key) + "\`" + ", " + "\`" + 
                                        replace(value) + "\`" + "]")).join(",\\n") + "]" + "}"
}

function parseCodeMap(string) {
    const array = eval("(" + string + ")");
    return new Map(array.value);
}
`],
[`33`, `const newRunner = (program) => {
  const runnerIframe = document.createElement("iframe");
  runnerIframe.srcdoc = \`
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <style>
        </style>
        <script type="module">
            import {ProgramState, CodeMirror, newInspector} from "./renkon-web.js";
            window.CodeMirror = CodeMirror;
            window.newInspector = newInspector;
            const docName = "Server-Side-Child.renkon";
            window._loaded = false;

            function loadRenkon(str) {
                console.log("loadRenkon");
                const index = str.indexOf("{__codeMap: true, value:");
                let code;
                let data1 = JSON.parse(str.slice(0, index));
                let map = new Map();
                if (data1?.windowEnabled?.map?.values) {
                    map = new Map(data1?.windowEnabled?.map?.values);
                }
                const data2 = str.slice(index);
                const array = eval("(" + data2 + ")");
                code = array.value;
                code = code.filter((pair) => (!map.get(pair[0]) || map.get(pair[0]).enabled));
                window.programState = new ProgramState(Date.now());
                programState.setupProgram(code.map((pair) => ({blockId: pair[0], code: pair[1]})), docName);
                if (programState.evaluatorRunning === 0) {
                    programState.evaluator();
                }
                if (!window._loaded) {
                    window._loaded = true;
                    window.parent.postMessage({ready: true, name: "\${program.name}"});
                }
            }

            fetch(docName).then((resp) => resp.text()).then((result) => {
                loadRenkon(result);
            }).catch((err) => {
                console.error("docName could not be loaded");
            });

            window.onmessage = (evt) => {
                if (!window.programState || !evt.data) {return;}
                if (evt.data.loadData) {
                    console.log("loading");
                    if (evt.data.loadData.code) {
                      window.programState.registerEvent("loadRequest", evt.data.loadData.code);
                    } else {
                      window.programState.registerEvent("nameRequest", evt.data.loadData.name);
                    }
                    if (window.programState.evaluatorRunning === 0) {
                      programState.evaluator();
                    }
                }
                if (typeof evt.data.serverURL === "string") {
                    window.programState.registerEvent("serverURL", evt.data.serverURL);
                }
                if (typeof evt.data.statusChange === "string") {
                  console.log("statusChange", evt.data.statusChange);
                    window.programState.registerEvent("statusChange", evt.data.statusChange);
                }

            };
        </script>
    </head>
    <body></body>
</html>\`;
  runnerIframe.classList = "runnerIframe";
  runnerIframe.id = \`runner-\${program.name}\`;
  return runnerIframe;
};

const runners = Behaviors.collect(
  {map: new Map()},
  renkonProgram, (prev, selected) => {
    if (selected === null) {return prev;}
    if (prev.map.get(selected.name)) {return prev}
    console.log("runners updated", selected);
    prev.map.set(selected.name, newRunner(renkonProgram));
    return {map: prev.map};
  }
)

const currentRunner = Behaviors.collect(
  {prev: null, runner: null, name: ""},
  renkonProgram, (prev, selected) => {
    console.log("currentRunner", selected);
    if (selected === null) {return {prev: prev.runner, runner: null, name: ""};}
    const runner = runners.map.get(selected.name);
    if (prev.runner === runner) {return prev;}
    return {prev: prev.runner, runner: runner, name: selected.name}
  }
);

const updateRunner = ((currentRunner, selected) => {
  console.log("updateRunner");
  const show = (dom) => dom.style.removeProperty("display");
  const hide = (dom) => dom.style.setProperty("display", "none");
  if (currentRunner.prev) {
      hide(currentRunner.prev);
  }
  if (selected === null) {return;}
  if (!currentRunner.runner) {return;}
  if (![...renkon.querySelector("#field").childNodes].includes(currentRunner.runner)) {
    renkon.querySelector("#field").appendChild(currentRunner.runner);
  }
  show(currentRunner.runner);
})(currentRunner, renkonProgram);

const readyHandler = Events.observe((notify) => {
  const listener = (evt) => {
    if (evt.data.ready === true && evt.data.name) {
      notify({source: evt.source, name: evt.data.name});
    }
  }
  window.addEventListener("message", listener);
  return () => window.removeEventListener("message", listener);
});

((ready, runners, programs) => {
  console.log("ready", readyHandler);
  const program = programs.map.get(ready.name);
  const runner = runners.map.get(ready.name);
  if (!runner || !program) {return;}
  send(runner, {loadData: program});
})(readyHandler, runners, programs);

((serverURL, runners) => {
  console.log("serverURL", readyHandler);
  sendAll(runners, {serverURL});
})(serverURL, runners);

((statusChange, runners) => {
  const runner = runners.map.get(statusChange.name);
  const oldStatus = statusChange.status === "go" ? "stop" : "go";
  if (!runner) {return;}

  send(runner, {statusChange: oldStatus});
})(statusChange, runners);

const sendAll = (runners, value) => {
  for (const [name, runner] of runners.map) {
    runner.contentWindow?.postMessage(value)
  }
};

const send = (runner, value) => {
  runner.contentWindow.postMessage(value)
}
`],
[`38`, `const serverURL = Behaviors.keep(Events.observe((notify) => {
    const change = (evt) => {
        notify(evt.target.value);
    };
    notify("http://localhost:2345");
    // for now we just set it
    renkon.querySelector("#serverURL").value = "http://localhost:2345";
    renkon.querySelector("#serverURL").addEventListener("input", change);
}));

const listUpdateRequest = Events.or(updateButton, readyHandler);

console.log("listUpdateRequest", listUpdateRequest);

const optionsJson = Behaviors.collect({names: []},
  listUpdateRequest, (_prev, _evt) => {
    console.log("updating options");
    let realURL = serverURL;
    if (realURL === "") {
      return _prev;
    }
    if (!realURL.endsWith("/")) {
      realURL = realURL + "/";
    }
    return fetch(realURL + "list").then((resp) => resp.json());
});

const programs = Behaviors.select(
  {map: new Map()},
  trash, (prev, trash) => {
    if (!prev.map.has(trash)) {return prev}
    prev.map.delete(trash);
    return {map: prev.map}
  },
  renkonProgramLoaded, (prev, program) => {
    if (program === null) {return prev;}
    if (prev.map.get(program.name)) {return prev;}
    prev.map.set(program.name, program);
    return {map: prev.map}
  },
);

const programStates = Behaviors.select(
  {map: new Map()}, // {name<string>, status: "go"|"stop"}
  statusChange, (prev, statusChange) => {
    prev.map.set(statusChange.name, statusChange);
    return {map: prev.map};
  }
);

const renkonProgram = ((programs, selected) => {
  if (selected === null) {return null;}
  let already = programs.map.get(selected.name);
  if (already) {return already;}
  const docName = selected.name + ".renkon";
  return fetch(docName).then((resp) => resp.text()).then((result) => {
      return {name: selected.name, code: loadRenkon(result)};
  }).catch((err) => {
    console.log(\`\${docName} could not be loaded\`);
    return {name: selected.name};
  });
})(programs, selectedProgram);

const renkonProgramLoaded = Events.receiver();
Events.send(renkonProgramLoaded, Events.change(renkonProgram));`],
[`40`, `const selected = Events.receiver();

const selectedProgram = Behaviors.select(
  null,
  trash, (_prev, trash) => null,
  selected, (_prev, selected) => selected,
);

const thumbnails = ((programs, programStates) => {
  const names = [...programs.map.keys()];
  const thumb = (name) => {
    return h(
      "div", {
        "class": "thumbnail",
        id: name,
        onClick: (evt) => Events.send(selected, {name})
      },
      [label(name), statusButton(name), trashButton(name)]);
  };
  
  const label = (name) => {
    return h("div", {
      "class": "menuButton thumbLabel"
    }, name)
  };
  const plusButton =  () => {
    return h(
      "button", {
        "class": "sidebarButton plusButton",
        id: "plus",
        onClick: (evt) => plusHandler()
      },
    );
  };

  const trashButton = (name) => {
    return h(
      "button", {
        "class": "sidebarButton trashButton",
        id: \`trash-\${name}\`,
        onClick: (evt) => Events.send(trash, name)
      },
    );
  };

  const statusButton = (name) => {
    return h(
      "button", {
        "class": "sidebarButton statusButton",
        id: \`status-\${name}\`,
        status: (programStates.map.get(name)?.status|| "go"),
        onClick: (evt) => {
          const newStatus = programStates.map.get(name)?.status === "stop" ? "go" : "stop";
          Events.send(statusChange, {name, status: newStatus});
        }
      },
    );
  };

  return h("div", {id: "thumbnails"}, [...names.map(thumb), plusButton()]);
})(programs, programStates);

const plusHandler = () => {
  const newName = "untitled" + (programs.map.size + 1);
  Events.send(selected, {name: newName});
}

render(thumbnails, renkon.querySelector("#thumbnailsHolder"));

const trash = Events.receiver();
const statusChange = Events.receiver();

/*
const _stop = ((trash) => {
  return fetch(serverURL + "/stop", {
    method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({name: trash})
    });
})(trash);
*/
`]]}