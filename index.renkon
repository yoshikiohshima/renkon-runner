{"padTitle":"Server-Side-Renkon",
"positions":{"map":{"__map":true,
"values":[["6",{"height":2586.9583136586007,
"id":"6",
"type":"resize",
"width":1373.5999282655969,
"x":-99.3602965940236,
"y":-261.0542546571053}],["11",{"height":1075.3995611047555,
"id":"11",
"type":"resize",
"width":821.5810873086926,
"x":-1076.9890036141771,
"y":-260.8404648364692}],["12",{"height":1715.6041161405815,
"id":"12",
"type":"move",
"width":850.114076996712,
"x":-1089.8589141419989,
"y":1576.2956571268514}],["33",{"height":2732.8228234287444,
"id":"33",
"type":"resize",
"width":1059.7658297284997,
"x":-2215.4455764673544,
"y":-265.92500093615115}],["38",{"height":568.0726807128361,
"id":"38",
"type":"resize",
"width":846.4080202231688,
"x":-1087.6336226046026,
"y":924.4501528664034}]]}},
"titles":{"map":{"__map":true,
"values":[["6",{"id":"6",
"state":false,
"title":"CSS"}],["11",{"id":"11",
"state":false,
"title":"Initialization"}],["12",{"id":"12",
"state":false,
"title":"Stringify"}],["33",{"id":"33",
"state":false,
"title":"iframes"}],["38",{"id":"38",
"state":false,
"title":"Data"}]]}},
"version":2,
"windowEnabled":{"map":{"__map":true,
"values":[["6",{"enabled":true,
"id":"6"}],["11",{"enabled":true,
"id":"11"}],["12",{"enabled":true,
"id":"12"}],["33",{"enabled":true,
"id":"33"}],["38",{"enabled":true,
"id":"38"}]]}},
"windowTypes":{"map":{"__map":true,
"values":[["6","code"],["11","code"],["12","code"],["33","code"],["38","code"]]}},
"windows":["6","11","12","33","38"],
"zIndex":{"map":{"__map":true,
"values":[["6",109],["11",111],["12",120],["33",118],["38",116]]}}}
{__codeMap: true, value: [[`6`, `    const css = \`
@font-face {
    font-family: "OpenSans-Regular";
    src: url("./assets/fonts/open-sans-v17-latin-ext_latin-regular.woff2") format("woff2");
}

@font-face {
  font-family: 'OpenSans-SemiBold';
  src: url("./assets/fonts/open-sans-v17-latin-ext_latin-600.woff2") format('woff2');
}

html, body, #renkon {
    overflow: hidden;
    height: 100%;
    margin: 0px;
}

#renkon {
   display: flex;
}

#field {
   flex-grow: 1;
}

html, body {
  overscroll-behavior-x: none;
  touch-action: none;
}


#owner {
    position: absolute;
    pointer-events: initial;
}

#buttonBox {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    row-gap: 8px;
    left: 0px;
    top: 0px;
    width: 100%;
    padding-bottom: 8px;
    padding-top: 8px;
    border-bottom: 1px solid black;
    background-color: white;
    position: absolute;
    z-index: 200000;
}

#padTitle {
    margin-left: 24px;
}

.spacer {
    flex-grow: 1;
}

.menuButton {
    font-family: 'OpenSans-SemiBold';
    color: black;
    margin-left: 4px;
    margin-right: 4px;
    border-radius: 4px;
    cursor: pointer;
    border: 2px solid #555;
}
                   

.runnerIframe {
    width: 100%;
    height: 100%;
    border: 2px solid black;
    box-sizing: border-box;
    border-radius: 0px 0px 6px 6px;
    background-color: #fff;
    user-select: none;
}


.closeButton {
    background-image: url("data:image/svg+xml,%3Csvg%20id%3D%22Layer_1%22%20data-name%3D%22Layer%201%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M8.48%2C12.25C6.4%2C10.17%2C4.37%2C8.16%2C2.35%2C6.15c-.34-.34-.68-.69-1-1.05a2.34%2C2.34%2C0%2C0%2C1%2C.17-3.26%2C2.3%2C2.3%2C0%2C0%2C1%2C3.25-.09C7%2C3.93%2C9.23%2C6.14%2C11.45%2C8.34a5.83%2C5.83%2C0%2C0%2C1%2C.43.58c.36-.4.62-.71.9-1%2C2-2%2C4.12-4%2C6.12-6.08a2.51%2C2.51%2C0%2C0%2C1%2C3.41%2C0%2C2.37%2C2.37%2C0%2C0%2C1%2C0%2C3.43c-2.18%2C2.22-4.39%2C4.41-6.58%2C6.62-.11.1-.21.22-.34.35l.44.48L22.09%2C19A2.7%2C2.7%2C0%2C0%2C1%2C23%2C20.56a2.49%2C2.49%2C0%2C0%2C1-1.29%2C2.54A2.36%2C2.36%2C0%2C0%2C1%2C19%2C22.69c-2-2-4-4-6.06-6-.33-.33-.62-.68-1-1.12-1.63%2C1.66-3.17%2C3.25-4.73%2C4.82-.79.8-1.6%2C1.59-2.42%2C2.36a2.32%2C2.32%2C0%2C0%2C1-3.21-.1%2C2.3%2C2.3%2C0%2C0%2C1-.19-3.25c2.14-2.2%2C4.31-4.36%2C6.48-6.54Z%22%20fill%3D%22%234D4D4D%22%2F%3E%3C%2Fsvg%3E");
}

.runButton {
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%3E%3C!--%20Box%20outline%20--%3E%3Crect%20x%3D%223%22%20y%3D%223%22%20width%3D%2218%22%20height%3D%2218%22%20rx%3D%222%22%20ry%3D%222%22%2F%3E%3C!--%20Right-pointing%20triangle%20(play%20icon)%20--%3E%3Cpath%20d%3D%22M9%207L17%2012L9%2017Z%22%20fill%3D%22%234D4D4D%22%20stroke%3D%22none%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");
    display: none;
    pointer-events: none;
}

.runButton[type="runner"] {
    display: inherit;
    pointer-events: all;
}

.enabledButton {
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%3E%3C!--%20Box%20outline%20--%3E%3Crect%20x%3D%223%22%20y%3D%223%22%20width%3D%2218%22%20height%3D%2218%22%20rx%3D%222%22%20ry%3D%222%22%20stroke-width%3D%222%22%2F%3E%3C!--%20Thicker%20checkmark%20--%3E%3Cpath%20d%3D%22M5.5%2012.5L10.5%2017.5L18.5%207.5%22%20stroke-width%3D%223%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");
}

.enabledButton[disabled="true"] {
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Crect%20x%3D%223%22%20y%3D%223%22%20width%3D%2218%22%20height%3D%2218%22%20rx%3D%222%22%20ry%3D%222%22%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%2F%3E%3C%2Fsvg%3E");
}

.plusButton {
    width: 24px;
    height: 24px;
    background-position: center;
    background-size: 18px 18px;
    background-image: url("data:image/svg+xml,%3Csvg%20width%3D%2224px%22%20height%3D%2224px%22%20viewBox%3D%220%200%2024%2024%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20fill%3D%22none%22%20stroke%3D%22%234D4D4D%22%20stroke-width%3D%223%22%20stroke-linecap%3D%22round%22%3E%3Cline%20x1%3D%2212%22%20y1%3D%225%22%20x2%3D%2212%22%20y2%3D%2219%22%2F%3E%3Cline%20x1%3D%225%22%20y1%3D%2212%22%20x2%3D%2219%22%20y2%3D%2212%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");
}
\`;

    ((css) => {
        const renkon = document.querySelector("#renkon");
        const style = document.createElement("style");
        style.id = "pad-css";
        style.textContent = css;
        renkon.querySelector("#pad-css")?.remove();
        renkon.appendChild(style);
    })(css);
`],
[`11`, `const {h, html, render} = import("./preact.standalone.module.js");

const renkon = (() => {
    const renkon = document.createElement("div");
    renkon.id = "renkon";
    renkon.innerHTML = \`
<div id="sidebar">
  <div id="sidebarTop">
    <input class="menuButton" id="serverURL"></input>
    <button class="menuButton" id="updateButton">update</button>
  </div>
  <div id="thumbnailsHolder">
  </div>
</div>
<div id="field">
</div>

\`.trim();

    document.body.querySelector("#renkon")?.remove();
    document.body.appendChild(renkon);
    return renkon;
})();

/*
const optionsJson = Behaviors.collect(["banana", "appple", "orange"],
  updateButton, (_prev, _evt) => {
    let realURL = serverURL;
    if (realURL === "") {
      return _prev;
    }
    if (!realURL.endsWith("/")) {
      realURL = realURL + "/";
    }
  return fetch(realURL + "list").then((resp) => resp.json());    
});
*/

const updateButton = Events.listener(renkon.querySelector("#updateButton"), "click", (evt) => evt);

const renkonProgram = ((programs, selected) => {
  let already = programs.map.get(selected.name);
  if (already) {return already;}
  const docName = selected.name + ".renkon";
  console.log("loading: " + docName);
  return fetch(docName).then((resp) => resp.text()).then((result) => {
      return {name: selected.name, code: loadRenkon(result)};
  }).catch((err) => {
    console.error("docName could not be loaded");
    return {name: selected.name};
  });
})(programs, selected);

const loadedRenkonProgram = Events.receiver();

Events.send(loadedRenkonProgram, Events.change(renkonProgram));

`],
[`12`, `const loadRenkon = (result) => {
    const index = result.indexOf("{__codeMap: true, value:");

    const data1 = result.slice(0, index);
    const data2 = result.slice(index);

    const loaded = parse(data1);

    if (loaded.version === 2) {
        const code = parseCodeMap(data2);
        loaded.code = code;
        return loaded;
    }
    console.log("unknown type of data");
}
  
function stringifyInner(node, seen) {
    if (node === undefined) return undefined;
    if (typeof node === 'number') return Number.isFinite(node) ? \`\${node}\` : 'null';
    if (typeof node !== 'object') return JSON.stringify(node, null, 4);

    let out;
    if (Array.isArray(node)) {
        out = '[';
        for (let i = 0; i < node.length; i++) {
            if (i > 0) out += ',';
            out += stringifyInner(node[i], seen) || 'null';
        }
        return out + ']';
    }

    if (node === null) return 'null';

    if (seen.has(node)) {
        throw new TypeError('Converting circular structure to JSON');
    }

    seen.add(node);

    if (node.constructor === window.Map) {
        let replacement = {__map: true, values: [...node]};
        return stringifyInner(replacement, seen);
    }

    if (node.constructor === window.Set) {
        let replacement = {__set: true, values: [...node]};
        return stringifyInner(replacement, seen);
    }

    let keys = Object.keys(node).sort();
    out = '';
    for (let i = 0; i < keys.length; i++) {
        let key = keys[i];
        let value = stringifyInner(node[key], seen, out);
        if (!value) continue;
        if (out !== '') out += ',\\n';
        out += JSON.stringify(key) + ':' + value;
    }
    seen.delete(node);
    return '{' + out + '}';
}

function stringify(obj) {
    let seen = new Set();
    return stringifyInner(obj, seen);
}

function parse(string) {
    return JSON.parse(string, (_key, value) => {
        if (typeof value === "object" && value !== null && value.__map) {
            return new Map(value.values);
        } else if (typeof value === "object" && value !== null && value.__set) {
            return new Set(value.values);
        }
        return value;
    });
}

function stringifyCodeMap(map) {
    function replace(str) {
        return str.replaceAll("\\\\", "\\\\\\\\").replaceAll("\`", "\\\\\`").replaceAll("\$", "\\\\\$");
    }

    return "\\n{__codeMap: true, value: " + "[" +
        [...map].map(([key, value]) => ("[" + "\`" + replace(key) + "\`" + ", " + "\`" + 
                                        replace(value) + "\`" + "]")).join(",\\n") + "]" + "}"
}

function parseCodeMap(string) {
    const array = eval("(" + string + ")");
    return new Map(array.value);
}
`],
[`33`, `const thumbnails = ((optionsJson) => {
  const names = optionsJson.names;
  const thumb = (name) => {
    return h(
      "div", {
        "class": "thumbnail",
        id: name,
        onClick: (evt) => Events.send(selected, {name})
      },
      name);
  };
  const plusButton =  () => {
    return h(
      "button", {
        "class": "menuButton plusButton",
        id: "plus",
        onClick: (evt) => plusHandler()
      },
      );
  }
  return h("div", {id: "thumbnails"}, [...names.map(thumb), plusButton()]);
})(optionsJson);

const plusHandler = () => {
  const newName = "untitled" + (optionsJson.names.length + 1);
  Events.send(selected, {name: newName});
}

render(thumbnails, renkon.querySelector("#thumbnailsHolder"));

const selected = Events.receiver();

const newRunner = (program) => {
  const runnerIframe = document.createElement("iframe");
  runnerIframe.srcdoc = \`
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <style>
        </style>
        <script type="module">
            import {ProgramState, CodeMirror, newInspector} from "./renkon-web.js";
            window.CodeMirror = CodeMirror;
            window.newInspector = newInspector;
            const docName = "Server-Side-Child.renkon";

            function loadRenkon(str) {
                const index = str.indexOf("{__codeMap: true, value:");
                let code;
                let data1 = JSON.parse(str.slice(0, index));
                let map = new Map();
                if (data1?.windowEnabled?.map?.values) {
                    map = new Map(data1?.windowEnabled?.map?.values);
                }
                const data2 = str.slice(index);
                const array = eval("(" + data2 + ")");
                code = array.value;
                code = code.filter((pair) => (!map.get(pair[0]) || map.get(pair[0]).enabled));
                window.programState = new ProgramState(Date.now());
                programState.setupProgram(code.map((pair) => ({blockId: pair[0], code: pair[1]})), docName);
                if (programState.evaluatorRunning === 0) {
                    programState.evaluator();
                }
                window.parent.postMessage({ready: true, name: "\${program.name}"});
            }

            fetch(docName).then((resp) => resp.text()).then((result) => {
                loadRenkon(result);
            }).catch((err) => {
                console.error("docName could not be loaded");
            });

            window.onmessage = (evt) => {
                if (!window.programState || !evt.data) {return;}
                if (evt.data.loadData) {
                    console.log("loading");
                    if (evt.data.loadData.code) {
                      window.programState.registerEvent("loadRequest", evt.data.loadData.code);
                    } else {
                      window.programState.registerEvent("nameRequest", evt.data.loadData.name);
                    }
                    if (window.programState.evaluatorRunning === 0) {
                      programState.evaluator();
                    }
                }
                if (typeof evt.data.serverURL === "string") {
                    window.programState.registerEvent("serverURL", evt.data.serverURL);
                }
            };
        </script>
    </head>
    <body></body>
</html>\`;
  runnerIframe.classList = "runnerIframe";
  runnerIframe.id = \`runner-\${program.name}\`;
  return runnerIframe;
};

const runners = Behaviors.collect(
  {map: new Map()},
  renkonProgram, (prev, selected) => {
    if (prev.map.get(selected.name)) {return prev}
    prev.map.set(selected.name, newRunner(renkonProgram));
    return {map: prev.map};
  }
)

const updateRunner = ((runners, selected) => {
  console.log("updateRunner");
  const runner = runners.map.get(selected.name);
  if (!runner) {return;}
  renkon.querySelector("#field").querySelector(".runnerIframe")?.remove();
  renkon.querySelector("#field").appendChild(runner);
})(runners, Behaviors.keep(selected));

const readyHandler = Events.observe((notify) => {
  const listener = (evt) => {
    if (evt.data.ready === true && evt.data.name) {
      notify({source: evt.source, name: evt.data.name});
    }
  }
  window.addEventListener("message", listener);
  return () => window.removeEventListener("message", listener);
});

((ready, runners, programs) => {
  console.log("ready", readyHandler);
  const program = programs.map.get(ready.name);
  const runner = runners.map.get(ready.name);
  if (!runner || !program) {return;}
  send(runner, {loadData: program});
})(readyHandler, runners, programs);

((serverURL, runners) => {
  console.log("serverURL", readyHandler);
  sendAll(runners, {serverURL});
})(serverURL, runners);

const sendAll = (runners, value) => {
  for (const [name, runner] of runners.map) {
    runner.contentWindow?.postMessage(value)
  }
};

const send = (runner, value) => {
  runner.contentWindow.postMessage(value)
}
`],
[`38`, `const serverURL = Behaviors.keep(Events.observe((notify) => {
    const change = (evt) => {
        notify(evt.target.value);
    };
    notify("http://localhost:2345");
    renkon.querySelector("#serverURL").addEventListener("input", change);
}));

const optionsJson = Behaviors.collect({names: ["banana", "apple", "orange"]},
  updateButton, (_prev, _evt) => {
    let realURL = serverURL;
    if (realURL === "") {
      return _prev;
    }
    if (!realURL.endsWith("/")) {
      realURL = realURL + "/";
    }
    return fetch(realURL + "list").then((resp) => resp.json());
});

const programs = Behaviors.collect(
  {map: new Map()},
  loadedRenkonProgram, (prev, add) => {
    if (prev.map.get(add.name)) {return prev;}
    prev.map.set(add.name, add);
    console.log("programs updated", add);
    return {map: prev.map}
  }
);
`]]}